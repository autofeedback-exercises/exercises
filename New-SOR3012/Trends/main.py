import matplotlib.pyplot as plt
import numpy as np
import scipy.stats
def random_walk( startpoint, nsteps, p ) :
  for i in range(nsteps) :
    if np.random.random() < p :
      startpoint += 1
    else :
      startpoint -= 1
  return startpoint

def gambler( startpoint, n, p ) :
  while startpoint > 0 and startpoint < n :
    if np.random.random() < p :
      startpoint += 1
    else :
      startpoint -= 1
  if startpoint==0 :
    return 1
  else :
    return 0

def nplays( startpoint, n, p ) :
  nsteps = 0
  while startpoint > 0 and startpoint < n :
    nsteps += 1
    if np.random.random() < p :
      startpoint += 1
    else :
      startpoint -= 1
  return nsteps

def sample_mean(start,n,p,m) :
  # Your code to calculate the the sample mean for m random variables that are generated by calling random_walker goes here
  mean, S2 = 0, 0
  for i in range(m) :
    myvar = gambler(start,n,p)
    mean = mean + myvar
    S2 = S2 + myvar**2
  mean /= m
  var = (m/(m-1))*( S2/m - mean**2 )
  lower = mean - scipy.stats.norm.ppf(0.95)*np.sqrt(var/m)
  upper = mean + scipy.stats.norm.ppf(0.95)*np.sqrt(var/m)
  # When completed this function should return
  # lower = the 5th percentile of the distribution for the sample mean
  # mean = your sample mean
  # upper = the 95th percentile of the distribution for the sample mean
  return lower, mean, upper
l, m, u = sample_mean( 5, 10, 0.3, 200 )
print('200 random walks were generated for a chain with length 10 and a probablity of winning of 0.3')
print('These random walks all started from state 5')
print('A fraction',m,'of these walks finishes in state 0')
print('Our simulations show that there is a 90% chance that the probablity of ruin lies between',l,'and',u)

x, y = np.linspace(1,9,9), np.zeros(9)
for i in range(1,10) : y[i-1] = sample_mean(i,10,0.4,200)[1]
plt.plot( x, y, 'ko' )
plt.xlabel("start point")
plt.ylabel("probability of ruin")
# This code is required for the autofeedback- don't delete it!
fighand = plt.gca()

x, y, error = np.linspace(0.3,0.7,5), np.zeros(5), np.zeros(5)
for i in range(3,8) :
  l, m, u = sample_mean(2,4,i*0.1,200)
  y[i-3], error[i-3] = m, u-m
plt.errorbar( x, y, yerr=error, fmt='ko' )
plt.xlabel('Probability of winning each game')
plt.ylabel('Probability of ruin')
# This code is required for the autofeedback- don't delete it!
fighand = plt.gca()
